<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title><%= title %></title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <!-- Include Bootstrap -->
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <!-- Include Bootstrap Table -->
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.1/bootstrap-table.min.css">
</head>
<!-- Define styles for a nice candidates table -->
<style>
    #candidates {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    #candidates td, #candidates th {
        border: 1px solid #ddd;
        padding: 8px;
    }

    #candidates tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    #candidates tr:hover {
        background-color: #ddd;
    }

    #candidates th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: right/*FIXME:left*/;
        background-color: #4CAF50;
        color: white;
    }

</style>
<header>
    <div class="container col-md-12" style="text-align: center;">
        <img class="logo" style="height: 100px;padding-top:20px;" src="/images/EH_logo.png"/>
    </div>
</header>
<body dir="rtl"><!-- FIXME: ltr -->
<ul>
</ul>
<table id="candidates"
       data-sort-name="dateCompleted"
       data-sort-order="desc"
       style="width:100%">
    <thead>
    <tr>
        <th data-field="date" data-sortable="true" data-sorter="textSorter" style="text-align: right"><!--FIXME: Date Added-->תאריך<br>קבלת קוח</th>
        <th data-field="name" data-sortable="true" data-sorter="textSorter"><!--FIXME: Name-->שם מועמד</th>
        <th data-field="phone"><!--FIXME: Phone-->טלפון</th>
        <th data-field="id"><!--FIXME: Phone-->ת.ז.</th>
        <th data-field="dateCompleted" data-sortable="true" data-sorter="textSorter"><!--FIXME: Date Completed-->תאריך מילוי</th>
        <th data-field="cv"><!--FIXME: CV-->קו"ח</th>
        <th data-field="report"><!--FIXME: Report-->דוח</th>
        <th data-field="score" data-sortable="true" data-sorter="textSorter"><!--FIXME: Score-->ציון</th>
        <th data-field="experience" data-sortable="true" data-sorter="textSorter"><!--FIXME: Experience-->חווית משתמש</th>
        <% if (advanced) { %>
            <th data-field="duration" data-sortable="true" data-sorter="numSorter"><!--FIXME: Duration-->זמן מילוי</th>
        <% } %>
        <% if (advanced) { %>
            <th data-field="formLink" data-sortable="false"><!--FIXME: Form -->שאלון</th>
        <% } %>
        <th data-field="phoneInterviewDate">תאריך<br>ראיון טלפוני</th>
        <th data-field="phoneInterviewResult">ראיון טלפוני</th>
        <th data-field="interviewDate">תאריך<br>ראיון פרונטלי</th>
        <th data-field="interviewResult">ראיון פרונטלי</th>
        <th data-field="reportRating">השוואה לדוח</th>
        <th data-field="hired">התקבל</th>
        <th data-field="workDate">תאריך<br>תחילת עבודה</th>
        <th data-field="startedWork">התחיל לעבוד</th>
    </tr>
    </thead>
    <% for (let i = 0;i < candidates.length;i++) {
        const candidate = candidates[i];
        formjson = candidate.form; // Get the answers
        let appExp = ''; // For holding the app experience response
        for (let j = 0; j < formjson.length; j++) {
            if (formjson[j] && formjson[j].hasOwnProperty('type')) { // safety
                if (formjson[j].type === 'A') { //is this an app exp type question?
                    if (formjson[j].hasOwnProperty('finalAnswer')) { // safety
                        appExp = formjson[j].finalAnswer; //save the final answer
                    }
                    break;
                }
            }
        }
    %>
    <tr>
        <% const dateTimeCreated = candidate.dateTimeCreated; %>
        <% let dateTimeCompleted = candidate.dateTimeCompleted; if ((dateTimeCompleted === undefined) && (candidate.formCompleted)) dateTimeCompleted = new Date('11/14/17');%>
        <% report = candidate.report; %>
        <td><%- (dateTimeCreated != undefined) ? dateTimeCreated.toLocaleString() : '' %></td>
        <td><%- candidate.fullName %></td>
        <td><%= candidate.phoneNumber %></td>
        <td><%= candidate.id %></td>
        <td><%- (dateTimeCompleted != undefined)?dateTimeCompleted.toLocaleString():'' %></td>
        <td><a href='<%- candidate.linkToCV %>' target='_blank'><!--FIXME: CV-->קו"ח</a></td>
        <td>
            <% if ((report) && (candidate.formCompleted)) {
                if (candidate.linkToReport !== undefined) { %>
                    <a href='<%= candidate.linkToReport %>' target='_blank'><!--FIXME: Report-->דוח</a>
                <% }
                else { %>
                    <a href='./recruiterReport?sid=<%- candidate.session.id %>' target='_blank'><!--FIXME: Report-->דוח</a>
                <% }
            }
            else { %>

            <% } %>
        </td>
        <td><%- (report != undefined)?report.finalScore:'Not Done' %></td>
        <td><%- appExp %></td>
        <% if (advanced) { %>
            <td><%= candidate.formDurationInMinutes %></td>
        <% } %>
        <% if (advanced) { %>
            <td><a href='<%= candidate.linkToForm %>' target='_blank'><!--FIXME: Form-->שאלון</a></td>
        <% } %>
        <td id="phoneInterviewDate_<%= candidate.session.id %>"><%= candidate.phoneInterviewDate %></td>
        <td id="phoneInterviewResult_<%= candidate.session.id %>"><%= candidate.phoneInterviewResult %></td>
        <td id="interviewDate_<%= candidate.session.id %>"><%= candidate.interviewDate %></td>
        <td id="interviewResult_<%= candidate.session.id %>"><%= candidate.interviewResult %></td>
        <td id="reportRating_<%= candidate.session.id %>"><%= candidate.reportRating %></td>
        <td id="hired<%= candidate.session.id %>"><%= candidate.hired %></td>
        <td id="workDate_<%= candidate.session.id %>"><%= candidate.workDate %></td>
        <td id="startedWork_<%= candidate.session.id %>"><%= candidate.startedWork %></td>
    </tr>
    <% } %>
</table>
</body>

<% include partials/footer %>
<!-- Include Bootstrap Table -->
<!--<script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.1/bootstrap-table.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.1/locale/bootstrap-table-zh-CN.min.js"></script>-->
<script src="/javascripts/bootstrap-table.min.js"></script>
<script src="/javascripts/bootstrap-table-locale-all.min.js"></script>
<script src="/javascripts/mindmup-editabletable.js"></script>
<script>
    // Sorting function for strings
    function textSorter(a, b) {
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    }

    // Sorting function for numbers
    function numSorter(a, b) {
        a = parseFloat(a);
        b = parseFloat(b);
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    }

    // Initialize the candidates table as a bootstrap-table
    const candidatesTable = $('#candidates');
    candidatesTable.bootstrapTable({
        locale: 'he-IL', //FIXME: en-US
        pagination: true, // Multiple pages
        search: true, // Show search box (more like filtering...)
        onPostBody: function () {  // Event triggere after table is added to the DOM
            $('#candidates').editableTableWidget({ // Initialize the table as an editableTable
                editor: $('<textarea>'),  // The editor will be a textarea
                //FIXME: editableTableWidget supports only one type of editor for the entire table.
                //       We would like to have different editors for different cells (e.g. calendar, dropdown)
                //       To support this we either need to modify the implementation of editableTableWidget or
                //       find another widget to replace it.
                preventColumns: [1, 2, 3, 4, 5, 6, 7, 8, 9<% if (advanced) { %>, 10, 11<% } %> ] // Columns which aren't editable
            });
        }
    });

    // Method called when a cell value is changed
    candidatesTable.on('change', function(evt, newValue) {
        const cellId = evt.target.id;
        const cellIdParts = cellId.split('_');
        if (!cellIdParts[1]) {
            //something went wrong as the ID doesn't seem to have the right structure
            return false; // Prevent the edit - at least the user will know something went wrong
        }
        // Create a PATCH request to update the db
        const sid = cellIdParts[1];
        const property = cellIdParts[0];
        let patchUrl = '/api/candidates/' + sid + '/' + property;
        let patchData = {value: newValue};
        // Send the result to the db
        sendUpdate(patchUrl, patchData)
            .then(function(result) {
                // Code depending on result
                console.log("Result ", result);
            })
            .catch(function(error) {
                // An error occurred
                console.log("Error: ", error);
            });
        return true; // Accept the edit although we don't actually know if it went through with the server
        //FIXME: Perhaps we need to remember the previous value and revert to it if we are rejected by the server
    });

    function sendUpdate(patchUrl, patchData) {
        var request = {};
        request.url = patchUrl;
        request.data = patchData;
        return new Promise(function(resolve, reject) {
            $.ajax({
                url : patchUrl,
                data : JSON.stringify(patchData),
                type : 'PATCH',
                contentType : 'application/json',
                success: resolve(request),
                error: reject(request)
            });
        });
    }

</script>

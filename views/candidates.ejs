<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title><%= title %></title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <!-- Include Bootstrap -->
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
          integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <!-- Include Bootstrap Table -->
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.1/bootstrap-table.min.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="/javascripts/bootstrap-table.min.js"></script>
    <script src="/javascripts/FileSaver.js"></script>
    <script lang="javascript" src="/javascripts/xlsx.full.min.js"></script>
    <script src="/javascripts/tableexport.js"></script>
</head>
<!-- Define styles for a nice candidates table -->
<style>
    /* On wide screen allow bootstrap container to scale to maximum available width */
    @media (min-width: 1200px) {
        .container {
            width: auto;
        }
    }

    html {
        max-width: 100%;
        /*overflow-x: hidden;*/
    }

    #candidates {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    #candidates td, #candidates th {
        border: 1px solid #ddd;
        padding: 8px;
    }

    #candidates tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    #candidates tr:hover {
        background-color: #ddd;
    }

    #candidates th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: right /*FIXME:left*/;
        <% if (advanced) { %>
            background-color: palevioletred;
        <% }
        else { %>
            background-color: cornflowerblue;
        <% } %>
        color: white;
    }

    .wideCol {
        min-width: 300px;
    }

    /* Use to body ID bootstrap-overrides to give this a huge weight so it overrides bootstrap */
    #bootstrap-overrides .xlsx {
        display: block;
        float: right;
        margin-right: 13px;
    }

    /* Select any table that's inside the table-responsive div */
    .table-responsive .table {
        max-width: none; /* This helps Safari on iOS to understand that it has to allow horizontal scrolling of the table */
    }

    .zui-wrapper {
        position: relative;
    }
    .zui-scroller {
        margin-<%= textAlign %>: 261px;
        overflow-x: scroll;
        overflow-y: visible;
        padding-bottom: 5px;
        width: 100%;
    }
    .zui-table .zui-sticky-col {
        /*border-left: solid 1px #DDEFEF;*/
        /*border-right: solid 1px #DDEFEF;*/
        <%= textAlign %>: 21px;
        position: absolute;
        top: auto;
        width: 120px;
        border: 1px solid #ddd;
        padding: 8px;
        padding-top: 12px;
        padding-bottom: 12px;
    }

    .zui-table .zui-sticky-col2 {
        /*border-left: solid 1px #DDEFEF;*/
        /*border-right: solid 1px #DDEFEF;*/
        <%= textAlign %>: 141px;
        position: absolute;
        top: auto;
        width: 120px;
        border: 1px solid #ddd;
        padding: 8px;
    }

    .zui-table .zui-sticky-col th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: right /*FIXME:left*/;
        color: white;
        <% if (advanced) { %>
            background-color: palevioletred;
        <% }
        else { %>
            background-color: cornflowerblue;
        <% } %>
    }

    .zui-table .zui-sticky-col2 th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: right /*FIXME:left*/;
        color: white;
        <% if (advanced) { %>
            background-color: palevioletred;
        <% }
        else { %>
            background-color: cornflowerblue;
        <% } %>
    }

    .zui-table .th-inner {
        color: white;
        <% if (advanced) { %>
            background-color: palevioletred;
        <% }
        else { %>
            background-color: cornflowerblue;
        <% } %>
    }

    .cell-nowrap {
        white-space: nowrap;
    }

</style>
<header>
    <div class="container col-md-12" style="text-align: center;">
        <img class="logo" style="height: 100px;padding-top:20px;" src="/images/EH_logo.png"/>
    </div>
</header>
<body id="bootstrap-overrides" dir="rtl"><!-- FIXME: ltr -->
<ul>
</ul>
<%
let answersOrder = {}, maxAnswer = 0, orderedAnswers = []; // Hold the correct answers order for all the iterations of the loop
if (answers) {
    // If we're in answers mode, we need to loop through all the candidates' answers first in order
    // to prepare the column headings with all the question IDs
    console.log("71: Answers mode");

    for (let i = 0; i < candidates.length; i++) { // Loop through candidates
        console.log("74: Answers mode: ", i);
        let candidate = candidates[i];
        formjson = candidate.form; // Get the answers
        if (candidate.formCompleted) { // Did this candidate complete the form?
            // Run through all the answers and sort them into the correct order
            for (let j = 0; j < formjson.length; j++) {
                if (formjson[j] && formjson[j].hasOwnProperty('id')) { // safety
                    const id = formjson[j].id;
                    let index;
                    if (answersOrder[id] !== undefined) {
                        // This answer was encountered before and therefore already has a numerical order
                        index = answersOrder[id];
                    }
                    else {
                        // This answer is encountered for the first time so we need to assign it a numerical order
                        index = maxAnswer;
                        answersOrder[id] = index;
                        maxAnswer++;
                    }
                    orderedAnswers[index] = id;
                }
            }
        }
    }
}
%>
<div class="wrapper container">
    <div id="tableDiv" class="table-responsive" style="overflow-x: visible; display:none;"> <!-- Makes our table into a bootstrap responsive table which behaves nicely on mobiles -->
        <div>
            <table id="candidates" class="zui-table"
                   data-sort-name="date"
                   data-sort-order="desc"
                   style="width:100%">
                <thead>
                <tr>
                    <% if (answers) { %>
                        <% console.log("108: Answers mode"); %>
                        <th data-field="name" data-sortable="true" data-sorter="textSorter"><!--FIXME: Name-->שם מועמד</th>
                        <%
                            // Add all the columns for <qid>
                            for (let j = 0;j < maxAnswer; j++) { %>
                                <th data-field="<%= orderedAnswers[j] %>" data-sortable="true"
                                    data-sorter="textSorter"><%= orderedAnswers[j] %></th>
                        <% }
                            // Add all the columns for <qid>_time
                            for (let j = 0;j < maxAnswer; j++) { %>
                                <th data-field="<%= orderedAnswers[j] %>_time" data-sortable="true"
                                    data-sorter="textSorter"><%= orderedAnswers[j] %>_time
                                </th>
                            <% } %>
                           <% console.log("117: Answers mode"); %>
                    <% }
                    else { %>
                    <th data-field="date" data-sortable="true" data-sort-name="_date_data" data-sorter="dateNumSorter"
                        class = "zui-sticky-col zui-sticky-th" style="text-align: right">
                        <!--FIXME: Date Added-->תאריך <br>קבלת קוח
                    </th>
                    <th data-field="name" data-sortable="true" data-sorter="textSorter" class = "zui-sticky-col2 zui-sticky-th"><!--FIXME: Name-->שם מועמד</th>
                    <th data-field="recSource" data-sortable="true" data-sorter="textSorter" class = "zui-nonsticky-th"><!--FIXME: Name-->מקור גיוס</th>
                    <th data-field="id"><!--FIXME: Phone-->ת.ז.</th>
                    <th data-field="phone"><!--FIXME: Phone-->טלפון</th>
                    <th data-field="email"><!--FIXME: Phone-->דוא"ל</th>
                    <% if (advanced) { %>
                        <th data-field="ehNotes" class="wideCol">הערות EH</th>
                    <% } %>
                    <th data-field="department"><!--FIXME: Phone-->מחלקה</th>
                    <th data-field="team"><!--FIXME: Phone-->צוות</th>
                    <th data-field="cvScreenDate"><!--FIXME: Phone-->תאריך<br>סינון קו"ח</th>
                    <th data-field="cvScreenResult"><!--FIXME: Phone-->סינון<br>עפ"י קו"ח</th>
                    <th data-field="dateCompleted" data-sortable="true" data-sort-name="_dateCompleted_data" data-sorter="dateNumSorter"><!--FIXME: Date Completed-->תאריך
                        מילוי
                    </th>
                    <th data-field="cv"><!--FIXME: CV-->קו"ח</th>
                    <th data-field="report"><!--FIXME: Report-->דוח</th>
                    <th data-field="score" data-sortable="true" data-sorter="textSorter"><!--FIXME: Score-->ציון</th>
                    </th>
                    <% if (advanced) { %>
                    <th data-field="experience" data-sortable="true" data-sorter="textSorter"><!--FIXME: Experience-->חווית משתמש
                    <th data-field="duration" data-sortable="true" data-sorter="numSorter"><!--FIXME: Duration-->זמן מילוי</th>
                    <th data-field="formLink" data-sortable="false"><!--FIXME: Form -->שאלון</th>
                    <th data-field="gooLink" data-sortable="false"><!--FIXME: goo.gl -->goo.gl</th>
                    <% } %>
                    <th data-field="phoneInterviewDate">תאריך <br>ראיון טלפוני</th>
                    <th data-field="phoneInterviewResult">ראיון טלפוני</th>
                    <th data-field="interviewDate">תאריך <br>ראיון פרונטלי</th>
                    <th data-field="interviewResult">ראיון פרונטלי</th>
                    <th data-field="auditDate">תאריך מבדק + ראיון</th>
                    <th data-field="auditResult">מבדק אמינות</th>
                    <th data-field="hrResult">ראיון מש"א</th>
                    <th data-field="refCallDate">תאריך<br>שיחת ממליצים</th>
                    <th data-field="refCallResult">שיחת ממליצים</th>
                    <th data-field="contractDate">תאריך<br>חתימת חוזה</th>
                    <th data-field="reportRating">השוואה לדוח</th>
                    <th data-field="hired">התקבל</th>
                    <th data-field="workDate">תאריך <br>תחילת עבודה</th>
                    <th data-field="processUpdate">עדכון תהליך<br>מועמד באיילון</th>
                    <th data-field="startedWork">התחיל לעבוד</th>
                    <th data-field="recruiterNotes" class="wideCol">הערות</th>
                    <% } %>
                </tr>
                </thead>
                <tbody>
                <% for (let i = 0; i < candidates.length; i++) {
                    const candidate = candidates[i];
                    formjson = candidate.form; // Get the answers
                    /*let appExp = ''; // For holding the app experience response
                    if (advanced) {
                        for (let j = 0; j < formjson.length; j++) {
                            if (formjson[j] && formjson[j].hasOwnProperty('type')) { // safety
                                if (formjson[j].type === 'A') { //is this an app exp type question?
                                    if (formjson[j].hasOwnProperty('finalAnswer')) { // safety
                                        appExp = formjson[j].finalAnswer; //save the final answer
                                    }
                                    break;
                                }
                            }
                        }
                    }*/
                    let appExp = candidate.appExp;
                } %>
                <%
                for (let i = 0; i < candidates.length; i++) { // Loop through candidates
                    const candidate = candidates[i];
                    formjson = candidate.form; // Get the answers
                    /*let appExp = ''; // For holding the app experience response
                    if (advanced) {
                        // Run through all the answers and find the answer for the app experience
                        for (let j = 0; j < formjson.length; j++) {
                            if (formjson[j] && formjson[j].hasOwnProperty('type')) { // safety
                                if (formjson[j].type === 'A') { //is this an app exp type question?
                                    if (formjson[j].hasOwnProperty('finalAnswer')) { // safety
                                        appExp = formjson[j].finalAnswer; //save the final answer
                                    }
                                    break;
                                }
                            }
                        }
                    }*/
                    let appExp = candidate.appExp;
                    if ((answers) && (candidate.formCompleted)) {
                        // If we're in answers mode we only include in the table candidates who have completed the form
                        console.log("185: Answers mode");
                        // Clear the orderedAnswers so we don't mix them up with previous answers
                        orderedAnswers = [];
                        // Run through all the answers and sort them into the correct order
                        for (let j = 0; j < formjson.length; j++) {
                            if (formjson[j] && formjson[j].hasOwnProperty('id')) { // safety
                                const id = formjson[j].id;
                                const index = answersOrder[id];
                                let answer = '', timeToAnswer = '';
                                if (formjson[j].hasOwnProperty('finalAnswer')) { // safety
                                    answer = formjson[j].finalAnswer;
                                }
                                if (formjson[j].hasOwnProperty('timeAnsweredInSeconds')) { // safety
                                    timeToAnswer = formjson[j].timeAnsweredInSeconds;
                                }

                                console.log("201: ", id, "; ", answer, "; ", timeToAnswer);
                                orderedAnswers[index] = {
                                    answer: answer,
                                    timeToAnswer: timeToAnswer
                                };
                            }
                        }
                    }
                %>
                <% if ((answers) && (candidate.formCompleted)) { %>
                <tr>
                    <% console.log("212: Answers mode"); %>
                    <td><%- candidate.fullName %></td>
                    <%
                        // Run through all the columns and add the answers first
                    for (let j = 0;j < maxAnswer; j++) {
                        if (!orderedAnswers[j]) {
                            orderedAnswers[j] = {
                                answer: '',
                                timeToAnswer: ''
                            };
                        } %>
                    <td><%= orderedAnswers[j].answer %></td>
                    <% } %>
                    <%
                        // Run through all the columns and add the times
                    for (let j = 0;j < maxAnswer; j++) { %>
                    <td><%= orderedAnswers[j].timeToAnswer %></td>
                    <% } %>
                </tr>
                <% }
                if (!answers) { %>
                <tr>
                    <% const dateTimeCreated = candidate.dateTimeCreated; %>
                    <% let dateTimeCompleted = candidate.dateTimeCompleted; if ((dateTimeCompleted === undefined) && (candidate.formCompleted)) dateTimeCompleted = new Date('11/14/17'); %>
                    <% report = candidate.report; %>
                    <td class="cell-nowrap zui-sticky-col zui-sticky-td <%- (dateTimeCreated != undefined) ? 'dateValue' : '' %>" data-num="<%- (dateTimeCreated != undefined) ? dateTimeCreated.valueOf() : '' %>">
                        <%- (dateTimeCreated != undefined) ? dateTimeCreated.toISOString() : '' %>
                    </td>
                    <td id="fullName_<%= candidate.session.id %>" class = "cell-nowrap zui-sticky-col2 zui-sticky-td"><%- candidate.fullName %></td>
                    <td id="recruitmentSource_<%= candidate.session.id %>" class = "cell-nowrap zui-nonsticky-td"><%- candidate.recruitmentSource %></td>
                    <td><%= candidate.id %></td>
                    <td id="phoneNumber_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.phoneNumber.replace(/\-/g, '') %></td>
                    <%
                        var mailSubject = encodeURIComponent('מועמדות לחברת ' + customer.name);
                        var mailContent = customer.SMSTextA?customer.SMSTextA:customer.SMSTextB;
                        if (mailContent) {
                            mailContent = mailContent.replace('$candidateName', candidate.fullName).replace('$formLink', candidate.linkToForm);
                            mailContent = encodeURIComponent(mailContent);
                        }
                    %>
                    <td id="email" class="cell-nowrap"><a href='mailto:<%= candidate.email %>?subject=<%= mailSubject %>&body=<%= mailContent %>' target='_blank'><!--FIXME: send email -->שלח/י&nbspדוא"ל</a></td>
                    <% if (advanced) { %>
                    <td id="ehNotes_<%= candidate.session.id %>" data-editor="1"><%= candidate.ehNotes %></td>
                    <% } %>
                    <td id="department_<%= candidate.session.id %>" data-editor="5" class="cell-nowrap"><%= candidate.department %></td>
                    <td id="team_<%= candidate.session.id %>" data-editor="6" class="cell-nowrap"><%= candidate.team %></td>
                    <td id="cvScreenDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.cvScreenDate %></td>
                    <td id="cvScreenResult_<%= candidate.session.id %> class="cell-nowrap"" data-editor="8"><%= candidate.cvScreenResult %></td>
                    <td class="cell-nowrap <%- (dateTimeCompleted != undefined) ? 'dateValue' : '' %>" data-num="<%- (dateTimeCompleted != undefined) ? dateTimeCompleted.valueOf() : '' %>">
                        <%- (dateTimeCompleted != undefined) ? dateTimeCompleted.toISOString() : '' %>
                    </td>
                    <td><a href='<%- candidate.linkToCV %>' target='_blank'><!--FIXME: CV-->קו"ח</a></td>
                    <td>
                        <% if ((report) && (candidate.formCompleted)) { %>
                        <% if (0) {//candidate.linkToReport !== undefined) { %>
                        <a href='<%= candidate.linkToReport %>' target='_blank'><!--FIXME: Report-->דוח</a>
                        <% }
                        else { %>
                        <a href='./recruiterReport?force=1&sid=<%- candidate.session.id %>' target='_blank'><!--FIXME: Report-->דוח</a>
                        <% } %>
                        <% } %>
                    </td>
                    <td><%- (report != undefined) ? report.finalScore : 'Not Done' %></td>
                    <% if (advanced) { %>
                        <td><%- appExp %></td>
                        <td><%= candidate.formDurationInMinutes %></td>
                        <td><a href='<%= candidate.linkToForm %>' target='_blank'><!--FIXME: Form-->שאלון</a></td>
                        <td><a href='<%= candidate.linkToForm + ".info" %>' target='_blank'><!--FIXME: goo.gl-->goo.gl</a></td>
                    <% } %>
                    <td id="phoneInterviewDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.phoneInterviewDate %></td>
                    <td id="phoneInterviewResult_<%= candidate.session.id %>"
                        data-editor="3" class="cell-nowrap"><%= candidate.phoneInterviewResult %></td>
                    <td id="interviewDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.interviewDate %></td>
                    <td id="interviewResult_<%= candidate.session.id %>" data-editor="4" class="cell-nowrap"><%= candidate.interviewResult %></td>
                    <td id="auditDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.auditDate %></td>
                    <td id="auditResult_<%= candidate.session.id %>" data-editor="7" class="cell-nowrap"><%= candidate.auditResult %></td>
                    <td id="hrResult_<%= candidate.session.id %>" data-editor="9" class="cell-nowrap"><%= candidate.hrResult %></td>
                    <td id="refCallDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.refCallDate %></td>
                    <td id="refCallResult_<%= candidate.session.id %>" data-editor="8" class="cell-nowrap"><%= candidate.refCallResult %></td>
                    <td id="contractDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.contractDate %></td>
                    <td id="reportRating_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.reportRating %></td>
                    <td id="hired_<%= candidate.session.id %>" data-editor="2" class="cell-nowrap"><%= candidate.hired %></td>
                    <td id="workDate_<%= candidate.session.id %>" class="cell-nowrap"><%= candidate.workDate %></td>
                    <td id="processUpdate_<%= candidate.session.id %>" data-editor="10" class="cell-nowrap"><%= candidate.processUpdate %></td>
                    <td id="startedWork_<%= candidate.session.id %>" data-editor="2" class="cell-nowrap"><%= candidate.startedWork %></td>
                    <td id="recruiterNotes_<%= candidate.session.id %>" data-editor="1"><%= candidate.recruiterNotes %></td>
                </tr>
                <% } %>
                <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>
</body>

<% include partials/footer %>
<!-- Include Bootstrap Table -->
<!--<script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.1/bootstrap-table.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.1/locale/bootstrap-table-zh-CN.min.js"></script>-->
<script src="/javascripts/bootstrap-table.min.js"></script>
<script src="/javascripts/bootstrap-table-locale-all.min.js"></script>
<script src="/javascripts/mindmup-editabletable.js"></script>
<script>
    // Sorting function for strings
    function textSorter(a, b) {
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    }

    // Sorting function for dates
    function dateSorter(a, b) {
        if (b === '') return 1;
        if (a === '') return -1;
        const da = Date.parse(a);
        const db = Date.parse(b);
        if (da < db) return -1;
        if (da > db) return 1;
        return 0;
    }

    // Sorting function for numbers
    function numSorter(a, b) {
        a = parseFloat(a);
        b = parseFloat(b);
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    }

    // Sorting function for dates stored as number
    function dateNumSorter(a, b) {
        if (a.num < b.num) return -1;
        if (a.num > b.num) return 1;
        return 0;
    }

    function formatDate(dateObj, dateFormat) {
        let dateStr = dateFormat.replace('YYYY', dateObj.getFullYear());      // First look for full-year (4-digit)
        dateStr = dateStr.replace('YY', dateObj.getFullYear().toString().slice(-2));   // Now look for 2-digit year (if 4-digit wasn't found...)
        dateStr = dateStr.replace('MM', ('0' + (1 + dateObj.getMonth())).slice(-2)); // Now replace 2-digit month
        dateStr = dateStr.replace('DD', ('0' + dateObj.getDate()).slice(-2));        // 2-digit day-of-month
        dateStr = dateStr.replace('HH', ('0' + dateObj.getHours()).slice(-2));       // 2-digit hour
        dateStr = dateStr.replace('mm', ('0' + dateObj.getMinutes()).slice(-2));        // 2-digit minute
        return dateStr;
    }

    // Parse all elements of class "dateValue" and format them to correct date format
    let dateCells = document.getElementsByClassName("dateValue");
    for (let i = 0; i < dateCells.length; i++) {
        //const dateStr = dateCells[i].innerText; // Date is expected to be parse-able (ISO format)
        //const dateObj = new Date(dateStr);      // Create a date obj for convenience
        const dateObj = new Date(parseInt(dateCells[i].attributes['data-num'].value, 10));      // Create a date obj for convenience
        // Only way to format as we wish - all the toLocaleString etc. functions don't do the job well
        dateCells[i].innerText = formatDate(dateObj, "<%= customer.dateFormat?customer.dateFormat:'YYYY-MM-DD HH:mm' %>");
    }

    // Add 'export to xlsx' button to table
    // Uses the tableexport.js lib
    // We do this before initing the bootstrap table because otherwise the export will only include the currently
    // viewed rows and not the entire table
    $("#candidates").tableExport({
        formats: ['xlsx'],  // Support only xlsx format
        bootstrap: true     // Use bootstrap for styling a nice flat button
    });
    // Initialize the candidates table as a bootstrap-table
    const candidatesTable = $('#candidates');
    candidatesTable.bootstrapTable({
        locale: 'he-IL', //FIXME: en-US
        pagination: true, // Multiple pages
        search: true, // Show search box (more like filtering...)
        paginationNextText: '<', //FIXME: Strangely enough this is for Hebrew (it's reversed)... for English I'm not sure
        paginationPreText: '>' //FIXME: Strangely enough this is for Hebrew (it's reversed)... for English I'm not sure
        <% if (!answers) { %>
        , onPageChange: function() { // Event triggers when the current page is change (by the user)
            // Every time the page is changed, need to re-format the frozen columns
            const table = $('#candidates');
            // Now we need to do the same for the td in every row separately (because the rows may have different heights)
            const rowCount = table.find('tr').length;
            for (let i=0;i<rowCount;i++) {
                // Get the formatting of the <td> in the 3rd column (not frozen) from the ith row
                const temp1 = table.find('tr:eq(' + i + ')');
                const temp2 = temp1.find('td:eq(2)');
                const tdAttribs = temp2.css(["height", "color", "background-color"]);
                if (tdAttribs !== undefined) { // There are attributes - for the column headings row this will be undefined
                    const tdTarget1 = table.find('tr:eq(' + i + ') td:eq(0)'); // Get the 1st column in the ith row
                    const tdTarget2 = table.find('tr:eq(' + i + ') td:eq(1)'); // Get the 2nd column in the ith row
                    // Now copy the attribs to the td of the frozen columns
                    tdTarget1.css("height", tdAttribs.height).css("color", tdAttribs.color).css("background-color", tdAttribs['background-color']);
                    tdTarget2.css("height", tdAttribs.height).css("color", tdAttribs.color).css("background-color", tdAttribs['background-color']);
                }
            }
        }
        , onPostBody: function () {  // Event triggere after table is added to the DOM
            $('#candidates').editableTableWidget({ // Initialize the table as an editableTable
                editor:
                    [
                        $('<input>'), // The default editor will be an input
                        $('<textarea>'),  // 1 - text area
                        $('<select>' +
                            '<option></option>' +
                            '<option value="כן">כן</option>' +
                            '<option value="לא">לא</option>' +
                            '</select>'),  // 2 - select yes/no
                        $('<select>' +   // 3 - select phone interview
                            '<option></option>' +
                            '<option value="עבר">עבר</option>' +
                            '<option value="לא עבר">לא עבר</option>' +
                            '<option value="לא רלוונטי">לא רלוונטי</option>' +
                            '<option value="צריך לחשוב על זה">צריך לחשוב על זה</option>' +
                            '<option value="לא ענה">לא ענה</option>' +
                            '</select>'),
                        $('<select>' +   // 4 - select face-to-face interview
                            '<option></option>' +
                            '<option value="עבר">עבר</option>' +
                            '<option value="לא עבר">לא עבר</option>' +
                            '<option value="לא הגיע">לא הגיע</option>' +
                            '<option value="מעוניין לחשוב">מעוניין לחשוב</option>' +
                            '<option value="הסיר מועמדות">הסיר מועמדות</option>' +
                            '</select>'),
                        $('<select>' +
                            '<option></option>' +
                            '<option value="מועדונים">מועדונים</option>' +
                            '<option value="חיים ומשכנתאות מועדונים">חיים ומשכנתאות מועדונים</option>' +
                            '<option value="משכנתאות בנקים ותאונות אישיות">משכנתאות בנקים ותאונות אישיות</option>' +
                            '</select>'),  // 5 - dept
                        $('<select>' +
                            '<option></option>' +
                            '<option value="שרות לקוחות">שרות לקוחות</option>' +
                            '<option value="מכירות">מכירות</option>' +
                            '<option value="מכירות בריאות">מכירות בריאות</option>' +
                            '<option value="מכירות ריסק">מכירות ריסק</option>' +
                            '<option value="מכירות בנקים למשכנתאות">מכירות בנקים למשכנתאות</option>' +
                            '<option value="מכירות בנקים למשכנתאות">מכירות בנקים למשכנתאות</option>' +
                            '<option value="שרות בנקים למשכנתאות">שרות בנקים למשכנתאות</option>' +
                            '<option value="מכירות תאונות אישיות ואלה">מכירות תאונות אישיות ואלה</option>' +
                            '<option value="מכירות תאונות אישיות">מכירות תאונות אישיות</option>' +
                            '<option value="מכירות תאונות אישיות">אחריות מקצועית זמני</option>' +
                            '</select>'),  // 6 - team
                        $('<select>' +
                            '<option></option>' +
                            '<option value="עבר">עבר</option>' +
                            '<option value="לא עבר">לא עבר</option>' +
                            '<option value="שיחת קבט עבר">שיחת קבט עבר</option>' +
                            '<option value="שיחת קבט לא עבר">שיחת קבט לא עבר</option>' +
                            '<option value="לא הגיע">לא הגיע</option>' +
                            '<option value="הסיר מועמדות">הסיר מועמדות</option>' +
                            '</select>'),  // 7 - Honesty audit
                        $('<select>' +
                            '<option></option>' +
                            '<option value="עבר">עבר</option>' +
                            '<option value="לא עבר">לא עבר</option>' +
                            '</select>'),  // 8 - CV Screening + references call
                        $('<select>' +
                            '<option></option>' +
                            '<option value="עבר">עבר</option>' +
                            '<option value="לא עבר">לא עבר</option>' +
                            '<option value="לא הגיע">לא הגיע</option>' +
                            '<option value="הסיר מועמדות">הסיר מועמדות</option>' +
                            '</select>'),  // 9 - HR Interview
                        $('<select>' +
                            '<option></option>' +
                            '<option value="נשלח מייל למועמד">נשלח מייל למועמד</option>' +
                            '</select>')  // 10 - process status
                    ],
                // Set columns which aren't editable
                <% if (advanced) { %>
                preventColumns: [1, 6, 12, 13, 14, 15, 16, 17, 18, 19],
                <% } else { %>
                preventColumns: [1, 2, 3, 4, 5, 6, 11, 12, 13, 14]
                <% } %>
            });
        }
        <% } %>
    });

    // Find the table-containing div generated by bootstrap-table and add the zui-wrapper class
    $('.fixed-table-container').addClass('zui-wrapper');
    // Find the table-body-containing div generated by bootstrap-table and add the zui-scroller class
    $('.fixed-table-body').addClass('zui-scroller');

    // Now we can un-hide the div
    $('#tableDiv').css('display','block');

    // The sticky columns feature corrupts the formatting of the frozen columns, so we need to copy it from another column
    // Unfortunately this has to happen after the div is displayed

    // Get the formatting of the <th> in the other column
    const thAttribs = $('.zui-nonsticky-th').css(["height", "color", "background-color"]);
    // ...and copy it to the th of the frozen columns
    $('.zui-sticky-th').css("height", thAttribs.height).css("color", thAttribs.color).css("background-color", thAttribs['background-color']);

    const table = $('#candidates');
    // Now we need to do the same for the td in every row separately (because the rows may have different heights)
    const rowCount = table.find('tr').length;
    for (let i=0;i<rowCount;i++) {
        // Get the formatting of the <td> in the 3rd column (not frozen) from the ith row
        const temp1 = table.find('tr:eq(' + i + ')');
        const temp2 = temp1.find('td:eq(2)');
        const tdAttribs = temp2.css(["height", "color", "background-color"]);
        if (tdAttribs !== undefined) { // There are attributes - for the column headings row this will be undefined
            const tdTarget1 = table.find('tr:eq(' + i + ') td:eq(0)'); // Get the 1st column in the ith row
            const tdTarget2 = table.find('tr:eq(' + i + ') td:eq(1)'); // Get the 2nd column in the ith row
            // Now copy the attribs to the td of the frozen columns
            tdTarget1.css("height", tdAttribs.height).css("color", tdAttribs.color).css("background-color", tdAttribs['background-color']);
            tdTarget2.css("height", tdAttribs.height).css("color", tdAttribs.color).css("background-color", tdAttribs['background-color']);
        }
    }

    // Following all the changes we also need to resize the zui-scroller to fit into the zui-wrapper
    const zuiScrollerWidth = '' + (parseInt($('.zui-wrapper').css(['width']).width) - 290) + 'px';
    $('.zui-scroller').css('width', zuiScrollerWidth);

    $( window ).resize(function() {
        // Resize the zui-scroller to fit into the zui-wrapper whenever the window size change
        const zuiScrollerWidth = '' + (parseInt($('.zui-wrapper').css(['width']).width) - 290) + 'px';
        $('.zui-scroller').css('width', zuiScrollerWidth);
    });

    // Method called when a cell value is changed
    candidatesTable.on('change', function (evt, newValue) {
        const cellId = evt.target.id;
        const cellIdParts = cellId.split('_');
        if (!cellIdParts[1]) {
            //something went wrong as the ID doesn't seem to have the right structure
            console.log("Invalid ID: ", cellId)
            return false; // Prevent the edit - at least the user will know something went wrong
        }
        // Create a PATCH request to update the db
        const sid = cellIdParts[1];
        const property = cellIdParts[0];
        let patchUrl = '/api/candidates/' + sid + '/' + property;
        let patchData = {value: newValue};
        // Send the result to the db
        sendUpdate(patchUrl, patchData);
        return true; // Accept the edit although we don't actually know if it went through with the server
        //FIXME: Perhaps we need to remember the previous value and revert to it if we are rejected by the server
    });

    function sendUpdate(patchUrl, patchData) {
        var request = {};
        request.url = patchUrl;
        request.data = patchData;
        $.ajax({
            url: patchUrl,
            data: JSON.stringify(patchData),
            type: 'PATCH',
            contentType: 'application/json',
            success: function (response) {
                console.log('Update successfully sent to server')
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log('Error: ', thrownError)
            }
        });
    }

</script>
